--------------------------------------------backend-----------------------------------------------------------------------------
#Api fetching and after show in JSON FOrmat

var blob = await.fetch('https://randomuser.me/api/');
var res = await.blob.json();
console.log(res);
---------------------------------------------------
#line by line code chale ho synchronous
#jo bhi code async nature ka ho ushko side stack mein  me bhej do and
agle code ko chalao jo bhi sync nature ka ho jab bhi sara sync code chal 
jay  means main stack khali ho jay tabhi check karo ke async code complete 
hua ki nahi and agar vo complete hua ho to ushko main stack me lao and chalao
-----------------------------------------------------------
Example of async=>
async function abcd(){
   var blob = await fetch('https://randomuser.me/api/');
   var ans = await blob.json();
   console.log(ans);
   console.log(ans.result);
}

abcd(); 
------------------------------------------------------------------------------------------------------
//creat server


const http = require('http');
const PORT = 3000;
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  if (req.url === '/') {
    res.end('Hello, World!');
  } else if (req.url === '/about') {
    res.end('Welcome to the About Page!');
  } else if (req.url === '/contact') {
    res.end('Contact us at contact@example.com');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('404 Not Found');
  }
});
server.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

---------------------------------------------------------------------------------------------------------
*********************************************** create server without Middleware simple method*********************************
const http = require('http');
const PORT = 3000;
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  if (req.url === '/') {
    res.end('Hello, World!');
  } else if (req.url === '/about') {
    res.end('Welcome to the About Page!');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('404 Not Found');
  }
});
server.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

npm i express
*********************************************** create server without Middleware *********************************
const express = require('express');
const app = express();

app.get("/",function(req,res){
    res.send("hello world");
})
app.get("/bhagya",function(req,res){
    res.send("bhagya");
})
app.listen(3000);

***********server ma koi code changes karya pachi automatic refresh thay e mate [nodemon] no use thay che******** */

*********************************************** create server with Middleware *********************************
const express = require('express');
const app = express();

app.use(function(req,res,next){
    console.log('middleware chala');
    next(); //jo aapde next na lakhiye to refresh walu round continue fraya j kare and response bhi na aape
})

app.get("/",function(req,res){
    res.send("hello world");
})
app.get("/bhagya",function(req,res){
    res.send("bhagya");
})
app.listen(3000);

*********************************************** create server with Middleware which also handle error *********************************
const express = require('express');
const app = express();

// Middleware for logging requests
app.use((req, res, next) => {
    console.log(`Request received: ${req.method} ${req.url}`);
    next(); // Pass control to the next middleware or route handler
});
// Middleware for handling unknown routes (404)
app.use((req, res, next) => {
    res.status(404).send("Page not found!");
});

// Error-handling middleware
app.use((err, req, res, next) => {
    console.error(`Error: ${err.message}`);
    res.status(500).send("Something went wrong on the server!");
});

// Route handlers
app.get("/", (req, res) => {
    res.send("Hello World!");
});

app.get("/bhagya", (req, res) => {
    res.send("Bhagya");
});
// Start the server
app.listen(3000, () => {
    console.log("Server is running on http://localhost:3000");
});
--------------------------------------------------------------------------------------------------------------
const express = require('express');
const app = express();
const path = require("path");

app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use(express.static(path.join(__dirname,'public')));
app.set('view engine','ejs');

app.get("/",function(req,res){
    res.render("index");
});
app.get("/:username",function(req,res){
    res.send(`welcome, ${req.params.username}`);
});

app.listen(3000,function(){
    console.log("Its runnnig");
})

******************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<body>
    <h1>Hey <%= 2+2 %></h1>
    <script src="/javascript/script.js"></script>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------
const express = require('express');
const app = express();
const path = require("path");
const fs = require('fs');

// Middleware for parsing JSON and form data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Set the view engine to EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Ensure the "files" directory exists
const filesDir = path.join(__dirname, 'files');
if (!fs.existsSync(filesDir)) {
    fs.mkdirSync(filesDir);
}

// Route to display the form and existing files
app.get('/', (req, res) => {
    fs.readdir(filesDir, (err, files) => {
        if (err) {
            console.error("Error reading files directory:", err);
            files = [];
        }
        // Read details from each file to pass them to the view
        const fileDetails = files.map(file => {
            const filePath = path.join(filesDir, file);
            const detail = fs.readFileSync(filePath, 'utf8');
            return { name: file, detail: detail };
        });

        res.render('index', { files: fileDetails });
    });
});

// Route to handle file creation
app.post('/create', (req, res) => {
    const { filename, detail } = req.body;

    if (!filename || !detail) {
        return res.status(400).send("Filename and detail are required.");
    }

    const filePath = path.join(filesDir, filename);

    // Write the file with the given details
    fs.writeFile(filePath, detail, (err) => {
        if (err) {
            console.error("Error creating file:", err);
            return res.status(500).send("Error creating file.");
        }
        res.redirect('/');
    });
});

// Start the server
app.listen(3100, () => {
    console.log("Server is running on http://localhost:3100");
});
**********************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f7f7f7;
        }
        h1, h2 {
            text-align: center;
        }
        form {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        input, textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007BFF;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        #file-list {
            max-width: 800px;
            margin: 20px auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        .file-card {
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .file-card h3 {
            margin-top: 0;
            font-size: 18px;
        }
        .file-card p {
            margin: 0;
            color: #555;
        }
        .file-card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>
    <h1>File Manager</h1>
    <form action="/create" method="POST">
        <label for="filename">File Name:</label>
        <input type="text" id="filename" name="filename" placeholder="Enter file name" required>

        <label for="detail">Detail:</label>
        <textarea id="detail" name="detail" rows="4" placeholder="Enter file details" required></textarea>

        <button type="submit">Create File</button>
    </form>

    <h2>Existing Files</h2>
    <div id="file-list">
        <% if (files.length > 0) { %>
            <% files.forEach(file => { %>
                <div class="file-card">
                    <h3><%= file.name %></h3>
                    <p><%= file.detail %></p>
                </div>
            <% }); %>
        <% } else { %>
            <p>No files created yet.</p>
        <% } %>
    </div>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------
const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: true }));

const PORT = 3200;

// Directory where files are stored
const filesDir = path.join(__dirname, 'files');

// Middleware to serve static files and set view engine
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Ensure the files directory exists
if (!fs.existsSync(filesDir)) {
    fs.mkdirSync(filesDir);
}

// Route to display the home page with file list
app.get('/', (req, res) => {
    fs.readdir(filesDir, (err, fileNames) => {
        if (err) {
            console.error("Error reading files directory:", err);
            return res.render('index', { files: [] });
        }

        // Prepare an array of file objects with `name` and `detail`
        const files = fileNames.map((fileName) => {
            const filePath = path.join(filesDir, fileName);
            const fileDetail = fs.readFileSync(filePath, 'utf8');
            return { name: fileName, detail: fileDetail };
        });

        // Render the EJS view with the files array
        res.render('index', { files });
    });
});

// Route to handle file creation
app.post('/create', (req, res) => {
    const { fileName, fileContent } = req.body;

    if (!fileName || !fileContent) {
        return res.redirect('/?error=Please+provide+file+name+and+content');
    }

    const filePath = path.join(filesDir, fileName);

    fs.writeFile(filePath, fileContent, (err) => {
        if (err) {
            console.error("Error writing file:", err);
            return res.redirect('/?error=Error+writing+file');
        }
        res.redirect('/');
    });
});

// Route to handle file deletion
app.get('/delete/:fileName', (req, res) => {
    const fileName = req.params.fileName;
    const filePath = path.join(filesDir, fileName);

    fs.unlink(filePath, (err) => {
        if (err) {
            console.error("Error deleting file:", err);
            return res.redirect('/?error=Error+deleting+file');
        }
        res.redirect('/');
    });
});

// Route to read a specific file's content
app.get('/read/:fileName', (req, res) => {
    const fileName = req.params.fileName;
    const filePath = path.join(filesDir, fileName);

    // Check if the file exists and read its content
    fs.readFile(filePath, 'utf8', (err, fileContent) => {
        if (err) {
            console.error("Error reading file:", err);
            return res.status(404).send('File not found');
        }

        // Render the EJS file with the file name and content
        res.render('read', { fileName, fileContent });
    });
});

// Route to display the edit form for a specific file
app.get('/edit/:fileName', (req, res) => {
    const fileName = req.params.fileName;
    const filePath = path.join(filesDir, fileName);

    // Read the file content
    fs.readFile(filePath, 'utf8', (err, fileContent) => {
        if (err) {
            console.error("Error reading file:", err);
            return res.status(404).send('File not found');
        }

        // Render the edit page with the file content
        res.render('edit', { fileName, fileContent });
    });
});


// Route to save the edited file
app.post('/edit/:fileName', (req, res) => {
    const fileName = req.params.fileName;
    const filePath = path.join(filesDir, fileName);
    const updatedContent = req.body.updatedContent;

    // Write the updated content back to the file
    fs.writeFile(filePath, updatedContent, 'utf8', (err) => {
        if (err) {
            console.error("Error writing to file:", err);
            return res.status(500).send('Could not save file');
        }

        // Redirect to the home page or file view
        res.redirect('/');
    });
});


// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
**************************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Manager</title>
    <style>
        /* General Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #000000;
            color: #000000;
            line-height: 1.6;
        }

        h1, h2 {
            text-align: center;
            color: #ffffff;
        }

        #file-list, form {
            max-width: 800px;
            margin: 20px auto;
            background: #000000;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            overflow: hidden;
            animation: fadeIn 1s ease-in-out;
        }

        /* File Cards */
        .file-card {
            padding: 20px;
            border-bottom: 1px solid #eee;
            
            background-color: #000000;
        }

        .file-card:last-child {
            border-bottom: none;
        }

        .file-card:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .file-card h3 {
            margin: 0;
            font-size: 1.4em;
            color: #ffffff;
        }

        .file-card p {
            margin: 10px 0;
            color: #ffffff;
        }

        .file-card a {
            display: inline-block;
            margin-right: 10px;
            padding: 8px 12px;
            color: white;
            background-color: #3498db;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .file-card a:hover {
            background-color: #2980b9;
            transform: scale(1.1);
        }

        .file-card a.delete {
            background-color: #e74c3c;
        }

        .file-card a.delete:hover {
            background-color: #c0392b;
        }

        /* Create File Form */
        form {
            padding: 20px;
            background-color: black;
        }

        form label {
            display: block;
            margin-bottom: 10px;
            color: #005ebd;
            font-weight: bold;
        }

        form input, form textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }

        form input:focus, form textarea:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }

        form button {
            display: block;
            width: 100%;
            padding: 10px 20px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1.2em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        form button:hover {
            background-color: #27ae60;
            transform: scale(1.05);
        }

        /* Animations */
        @keyframes fadeIn {
            0% {
                opacity: 0;
                transform: translateY(-20px);
            }
            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .file-card {
                padding: 15px;
            }

            form {
                padding: 15px;
            }

            form button {
                font-size: 1em;
            }
        }
    </style>
</head>
<body>
    <h1>File Manager</h1>
    <!-- Create new file -->
    <h2>Create a New File</h2>
    <form action="/create" method="POST">
        <label for="fileName">File Name:</label>
        <input type="text" id="fileName" name="fileName" required>
        <label for="fileContent">File Content:</label>
        <textarea id="fileContent" name="fileContent" rows="5" required></textarea>
        <button type="submit">Create File</button>
    </form>

    <!-- Display files -->
    <div id="file-list">
        <% if (files && files.length > 0) { %>
            <% files.forEach(file => { %>
                <div class="file-card">
                    <h3><%= file.name %></h3>
                    <p>
                        <%= file.detail.length > 100 ? file.detail.substring(0, 100) + '...' : file.detail %>
                    </p>
                    <div>
                        <a href="/read/<%= file.name %>">Read More</a>
                        <a href="/edit/<%= file.name %>">Edit</a>
                        <a href="/delete/<%= file.name %>" class="delete" onclick="return confirm('Are you sure you want to delete this file?')">Delete</a>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <p style="text-align: center; padding: 20px; color: #7f8c8d;">No files found. Create one below!</p>
        <% } %>
    </div>

    
</body>
</html>
***************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read File - <%= fileName %></title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        pre {
            background-color: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        a {
            display: inline-block;
            margin-top: 15px;
            color: blue;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>File: <%= fileName %></h1>
        <pre><%= fileContent %></pre>
        <a href="/">Go Back</a>
    </div>
</body>
</html>
****************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit File - <%= fileName %></title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        textarea {
            width: 100%;
            height: 300px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-family: monospace;
            font-size: 16px;
            resize: none;
        }
        button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #0056b3;
        }
        a {
            display: block;
            text-align: center;
            margin-top: 15px;
            text-decoration: none;
            color: blue;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Edit File: <%= fileName %></h1>
        <form action="/edit/<%= fileName %>" method="POST">
            <textarea name="updatedContent"><%= fileContent %></textarea>
            <button type="submit">Save Changes</button>
        </form>
        <a href="/">Go Back</a>
    </div>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------
const mongoose = require('mongoose');
mongoose.connect('mongodb://127.0.0.1:27017/mongopractice');

const userSchema = mongoose.Schema({
    name: String,
    username:String,
    email:String
})

module.exports = mongoose.model("user",userSchema);
***************************************************************
const express = require('express');

const userModel = require('./usermodel'); // Ensure the usermodel file exports a Mongoose model

const app = express();

// Routes
app.get('/', (req, res) => {
    res.send("hey");
});

app.get('/create', async (req, res) => {
    try {
        let createduser = await userModel.create({
            name: "harsh",
            email: "harsh@gmail.com",
            username: "harsh"
        });
        res.send(createduser);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.get('/update', async (req, res) => {
    try {
        let updateuser = await userModel.findOneAndUpdate(
            { username: "harsh" }, 
            { name: "bhagya" }, 
            { new: true }
        );
        res.send(updateuser);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.get('/read', async (req, res) => {
    try {
        let users = await userModel.find();
        res.send(users);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Specific username read (optional)
app.get('/read/:username', async (req, res) => {
    try {
        let user = await userModel.findOne({ username: req.params.username });
        res.send(user);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.get('/delete', async (req, res) => {
    try {
        let user = await userModel.findOneAndDelete({ username: "harsh" });
        res.send(user);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Start the server
app.listen(3000, () => {
    console.log("Server running on http://localhost:3000");
});
-----------------------------------------------------------------------------------------------------------------
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    imgUrl: { type: String },
});

const User = mongoose.model('User', userSchema);
module.exports = User;
*******************************************************
const express = require("express");
const mongoose = require("mongoose");
const User = require('./models/User');
const path = require('path');

const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/yourDatabaseName', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log("Connected to MongoDB"))
.catch((err) => console.error("Error connecting to MongoDB:", err));

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.set('view engine', 'ejs');
app.use(express.static('public'));

// Routes
app.get("/", (req, res) => {
    res.render("index");
});

app.post("/create", async (req, res) => {
    try {
        const { name, email, imgUrl } = req.body;
        await User.create({ name, email, imgUrl });
        res.redirect("/read");
    } catch (error) {
        console.error("Error creating user:", error);
        res.status(500).send("Internal Server Error");
    }
});

app.get("/read", async (req, res) => {
    try {
        const users = await User.find();
        res.render("read", { users });
    } catch (error) {
        console.error("Error reading users:", error);
        res.status(500).send("Internal Server Error");
    }
});

app.get("/edit/:id", async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        res.render("edit", { user });
    } catch (error) {
        console.error("Error fetching user:", error);
        res.status(500).send("Internal Server Error");
    }
});

app.post("/update/:id", async (req, res) => {
    try {
        const { name, email, imgUrl } = req.body;
        await User.findByIdAndUpdate(req.params.id, { name, email, imgUrl });
        res.redirect("/read");
    } catch (error) {
        console.error("Error updating user:", error);
        res.status(500).send("Internal Server Error");
    }
});

app.post("/delete/:id", async (req, res) => {
    try {
        await User.findByIdAndDelete(req.params.id);
        res.redirect("/read");
    } catch (error) {
        console.error("Error deleting user:", error);
        res.status(500).send("Internal Server Error");
    }
});

// Start the server
app.listen(3000, () => {
    console.log("Server started on http://localhost:3000");
});
************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Create User</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="max-w-md mx-auto mt-10">
    <a href="./read">User Information</a>
    <h1 class="text-2xl font-bold text-center mb-5">Create User</h1>
    <form action="/create" method="POST" class="bg-white p-6 rounded shadow-md">
      <div class="mb-4">
        <label class="block text-gray-700">Name</label>
        <input type="text" name="name" class="w-full p-2 border rounded" required />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Email</label>
        <input type="email" name="email" class="w-full p-2 border rounded" required />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Image URL</label>
        <input type="text" name="imgUrl" class="w-full p-2 border rounded" required />
      </div>
      <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create User</button>
    </form>
  </div>
</body>
</html>
*********************************************************
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Users</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="max-w-5xl mx-auto mt-10">
    <a href="/">Go Back</a>
    <h1 class="text-2xl font-bold text-center mb-5">Users</h1>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <% users.forEach(user => { %>
        <div class="bg-white p-6 rounded shadow-md">
          <img src="<%= user.imgUrl %>" alt="User Image" class="w-full h-48 object-cover rounded mb-4" />
          <h2 class="text-lg font-bold"><%= user.name %></h2>
          <p class="text-gray-600"><%= user.email %></p>
          <div class="mt-4 flex justify-between">
            <a href="/edit/<%= user._id %>" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">Edit</a>
            <form action="/delete/<%= user._id %>" method="POST" onsubmit="return confirm('Are you sure?');">
              <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Delete</button>
            </form>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</body>
</html>
******************************************************************
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Edit User</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="max-w-md mx-auto mt-10">
    <h1 class="text-2xl font-bold text-center mb-5">Edit User</h1>
    <form action="/update/<%= user._id %>" method="POST" class="bg-white p-6 rounded shadow-md">
      <div class="mb-4">
        <label class="block text-gray-700">Name</label>
        <input type="text" name="name" value="<%= user.name %>" class="w-full p-2 border rounded" required />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Email</label>
        <input type="email" name="email" value="<%= user.email %>" class="w-full p-2 border rounded" required />
      </div>
      <div class="mb-4">
        <label class="block text-gray-700">Image URL</label>
        <input type="text" name="imgUrl" value="<%= user.imgUrl %>" class="w-full p-2 border rounded" required />
      </div>
      <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Update User</button>
    </form>
  </div>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------
